# Generated by Django 3.2.14 on 2022-11-16 19:47

from django.conf import settings
from django.contrib.admin.models import ADDITION
from django.db import migrations
from django.urls import Resolver404

from geniza.corpus.annotation_utils import document_id_from_manifest_uri


def associate_related_footnotes(apps, schema_editor):
    """
    Data migration to associate all existing annotations with footnotes by foreign key,
    instead of using source and manifest URIs in the content field.
    """

    User = apps.get_model("auth", "User")
    Annotation = apps.get_model("annotations", "Annotation")
    ContentType = apps.get_model("contenttypes", "ContentType")
    Document = apps.get_model("corpus", "Document")
    Footnote = apps.get_model("footnotes", "Footnote")
    Source = apps.get_model("footnotes", "Source")
    LogEntry = apps.get_model("admin", "LogEntry")

    DIGITAL_EDITION = "X"

    # much of this code adapted from signal handlers and static methods
    document_contenttype = ContentType.objects.get_for_model(Document)

    annotations = Annotation.objects.all()
    for annotation in annotations:
        # resolve URIs to Source and Document IDs (without using static methods)
        manifest_uri = (
            annotation.content.get("target", {})
            .get("source", {})
            .get("partOf", {})
            .get("id")
        )
        source_uri = annotation.content.get("dc:source")
        source_id = int(source_uri.split("/")[-2])
        try:
            document_id = document_id_from_manifest_uri(manifest_uri)
        except Resolver404:
            continue
        try:
            # try to get a DIGITAL_EDITION footnote for this source and document
            footnote = Footnote.objects.get(
                doc_relation__contains=DIGITAL_EDITION,
                source__pk=source_id,
                content_type=document_contenttype,
                object_id=document_id,
            )
        except Footnote.DoesNotExist:
            # create the DIGITAL_EDITION footnote
            source = Source.objects.get(pk=source_id)
            footnote = Footnote.objects.create(
                source=source,
                doc_relation=[DIGITAL_EDITION],
                object_id=document_id,
                content_type=document_contenttype,
            )
            LogEntry.objects.log_action(
                user_id=User.objects.get(username=settings.SCRIPT_USERNAME).id,
                content_type_id=ContentType.objects.get_for_model(Footnote).pk,
                object_id=footnote.pk,
                object_repr=str(footnote),
                action_flag=ADDITION,
                change_message="Footnote automatically created via annotation migration.",
            )

        # instantiate the FK relation
        annotation.footnote = footnote

        # remove the existing manifest and source URIs from annotation content field
        del annotation.content["dc:source"]
        del annotation.content["target"]["source"]["partOf"]

    # save all FK relations and content fields
    Annotation.objects.bulk_update(annotations, ["content", "footnote"])


class Migration(migrations.Migration):

    dependencies = [
        ("annotations", "0002_annotation_footnote"),
        ("footnotes", "0022_footnote_one_digital_edition_per_document_and_source"),
    ]

    operations = [
        migrations.RunPython(associate_related_footnotes, migrations.RunPython.noop)
    ]
