# Generated by Django 3.1.6 on 2021-02-15 19:48

from django.contrib.auth.management import create_permissions
from django.db import migrations

USER_ADMIN = "User Admin"
# permissions for content user admin
user_admin_perms = {
    "auth": [
        "add_group",
        "change_group",
        "delete_group",
        "view_group",
        "add_user",
        "change_user",
        "delete_user",
        "view_user",
    ]
}


def create_user_admin_group(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    Permission = apps.get_model("auth", "Permission")

    # make sure permissions are created before loading the fixture
    # which references them
    # (when running migrations all at once, permissions may not yet exist)
    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, apps=apps, verbosity=0)
        app_config.models_module = None

    admin_group = Group.objects.create(name=USER_ADMIN)
    permissions = []
    for model, codenames in user_admin_perms.items():
        # using explicit get so that there will be an error if an
        # expected permission is not found
        for codename in codenames:
            permissions.append(Permission.objects.get(codename=codename))
    admin_group.permissions.set(permissions)


def remove_user_admin_group(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    Group.objects.filter(name=USER_ADMIN).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("common", "0002_create_script_user"),
    ]

    operations = [
        migrations.RunPython(
            create_user_admin_group, reverse_code=remove_user_admin_group
        )
    ]
