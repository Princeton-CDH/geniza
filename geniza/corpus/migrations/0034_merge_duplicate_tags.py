# Generated by Django 3.2.14 on 2022-08-08 17:50

from collections import defaultdict

from django.conf import settings
from django.contrib.admin.models import CHANGE
from django.db import migrations
from unidecode import unidecode


def lowercase_and_unidecode_tags(apps, schema_editor):
    """
    lowercase all tags, merge lowercase and uppercase tags into lowercase;
    remove diacritics from all tags, merge tags that are the same except for diacritics
    """
    ContentType = apps.get_model("contenttypes", "ContentType")
    LogEntry = apps.get_model("admin", "LogEntry")
    Tag = apps.get_model("taggit", "Tag")
    TaggedItem = apps.get_model("taggit", "TaggedItem")
    User = apps.get_model("auth", "User")

    tag_contenttype = ContentType.objects.get(app_label="taggit", model="tag")
    # generic user for logging scripted changes
    user = User.objects.get(username=settings.SCRIPT_USERNAME)

    # group tags by tag name, lowercase and without diacritics
    grouped_tags = defaultdict(list)
    for tag in Tag.objects.all():
        # group by unidecoded lower case name to ensure we group
        # correctly, even though we want to preserve the mixed case name if there is one
        grouped_tags[unidecode(tag.name).lower()].append(tag)

    # identify tags to be merged (more than one tag with the same collapsed name)
    merge_tags = {k: v for k, v in grouped_tags.items() if len(v) > 1}

    for tags in merge_tags.values():
        # sort tags by unidecoded name; choose the first,
        # which will be the capitalized variant if there is one
        tags.sort(key=lambda t: unidecode(t.name))
        primary_tag = tags[0]  # first tag will be our primary
        merging_tags = tags[1:]  # the rest will be merged
        change_message = "Merged %s" % ", ".join([t.name for t in merging_tags])

        # some documents have been tagged with two variants of tags we are merging,
        # so tagged items must be updated one tag at a time
        for tag in merging_tags:
            # find tagged items to update;
            # exclude any where objects is already associated with the primary tag
            # NOTE: taking advantage of the fact that we only currently allow tagging documents,
            # and not checking content type id
            TaggedItem.objects.filter(tag=tag).exclude(
                object_id__in=TaggedItem.objects.filter(tag=primary_tag).values_list(
                    "object_id", flat=True
                )
            ).update(tag=primary_tag)

        # delete the merged tags
        # (cascade should automatically delete any remaining/duplicate tagged items)
        Tag.objects.filter(pk__in=[t.pk for t in merging_tags]).delete()

        # if the primary tag needs to have diacritics removed, update it
        if primary_tag.name != unidecode(primary_tag.name):
            primary_tag.name = unidecode(primary_tag.name)
            primary_tag.save()
            change_message += "; removed diacritics"

        # log the tag merge on the primary tag
        LogEntry.objects.log_action(
            user_id=user.id,
            content_type_id=tag_contenttype.pk,
            object_id=primary_tag.pk,
            object_repr=str(primary_tag),
            change_message=change_message,
            action_flag=CHANGE,
        )

    # check for tags that don't need merging but do need diacritics removed
    nomerge_tags = {k: v for k, v in grouped_tags.items() if len(v) == 1}
    for tags in nomerge_tags.values():
        tag = tags[0]
        if tag.name != unidecode(tag.name):
            tag.name = unidecode(tag.name)
            tag.save()
            LogEntry.objects.log_action(
                user_id=user.id,
                content_type_id=tag_contenttype.pk,
                object_id=tag.pk,
                object_repr=str(tag),
                change_message="Removed diacritics",
                action_flag=CHANGE,
            )


class Migration(migrations.Migration):

    dependencies = [
        ("corpus", "0033_textblock_selected_images"),
        ("taggit", "0003_taggeditem_add_unique_index"),  # for Tag, TaggedItem
        ("admin", "0003_logentry_add_action_flag_choices"),  # for LogEntry
    ]

    operations = [
        migrations.RunPython(lowercase_and_unidecode_tags, migrations.RunPython.noop),
    ]
