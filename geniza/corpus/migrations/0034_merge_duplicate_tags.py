# Generated by Django 3.2.14 on 2022-08-08 17:50

from django.conf import settings
from django.contrib.admin.models import CHANGE
from django.db import migrations
from unidecode import unidecode


def lowercase_and_unidecode_tags(apps, schema_editor):
    """
    lowercase all tags, merge lowercase and uppercase tags into lowercase;
    remove diacritics from all tags, merge tags that are the same except for diacritics
    """
    ContentType = apps.get_model("contenttypes", "ContentType")
    Document = apps.get_model("corpus", "Document")
    LogEntry = apps.get_model("admin", "LogEntry")
    Tag = apps.get_model("taggit", "Tag")
    TaggedItem = apps.get_model("taggit", "TaggedItem")
    User = apps.get_model("auth", "User")

    doc_contenttype = ContentType.objects.get(app_label="corpus", model="document")
    tag_contenttype = ContentType.objects.get(app_label="taggit", model="tag")
    (user, _) = User.objects.get_or_create(
        username=settings.SCRIPT_USERNAME, is_staff=False, is_active=False
    )  # generic user for script execution
    tags_to_delete = []
    tagged_items_to_delete = []

    for tag in Tag.objects.all():
        lower_ascii_name = unidecode(tag.name).lower()
        if lower_ascii_name != tag.name:
            try:
                # a renamed version of this tag exists
                renamed_tag = Tag.objects.exclude(pk=tag.pk).get(name=lower_ascii_name)
                tagged_items = tag.taggit_taggeditem_items.all()
                # remove the old tag from all tagged documents, then add the new version
                for ti in tagged_items:
                    # querying on Document tags__name__in in a migration raises FieldDoesNotExist
                    # on TaggedItem.content_object, so must use object_id instead
                    document = Document.objects.get(pk=ti.object_id)
                    # cannot use tags.remove() and add() directly in migrations, so must perform
                    # operations on TaggedItem instead
                    tagged_items_to_delete.append(ti.pk)
                    TaggedItem.objects.get_or_create(
                        tag=renamed_tag,
                        content_type=ti.content_type,
                        object_id=document.pk,
                    )
                    # log tag merge on document
                    LogEntry.objects.log_action(
                        user_id=user.id,
                        content_type_id=doc_contenttype.pk,
                        object_id=document.pk,
                        object_repr=str(document),
                        change_message=f'replaced tag "{tag.name}" with "{lower_ascii_name}"',
                        action_flag=CHANGE,
                    )
                # mark the duplicate for deletion
                tags_to_delete.append(tag.pk)
            except Tag.DoesNotExist:
                # no renamed version; rename the original
                LogEntry.objects.log_action(
                    user_id=user.id,
                    content_type_id=tag_contenttype.pk,
                    object_id=tag.pk,
                    object_repr=str(tag),
                    change_message=f'renamed tag "{tag.name}" to "{lower_ascii_name}"',
                    action_flag=CHANGE,
                )
                tag.name = lower_ascii_name
                tag.save()

    # delete all marked taggings and tags
    TaggedItem.objects.filter(pk__in=tagged_items_to_delete).delete()
    Tag.objects.filter(pk__in=tags_to_delete).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("corpus", "0033_textblock_selected_images"),
        ("taggit", "0003_taggeditem_add_unique_index"),  # for Tag, TaggedItem
        ("admin", "0003_logentry_add_action_flag_choices"),  # for LogEntry
    ]

    operations = [
        migrations.RunPython(lowercase_and_unidecode_tags, migrations.RunPython.noop),
    ]
