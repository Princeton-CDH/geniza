from django.db import models

from psqlextra.indexes import CaseInsensitiveUniqueIndex


class CollectionManager(models.Manager):

    def get_by_natural_key(self, abbrev):
        return self.get(abbrev=abbrev)


class Collection(models.Model):
    '''Collection at a library that holds Geniza fragments'''
    library = models.CharField(max_length=255)
    abbrev = models.CharField('Abbreviation', max_length=255)
    collection = models.CharField(
        max_length=255, blank=True,
        help_text='Collection name, if different than Library')
    location = models.CharField(
        max_length=255, help_text='Current location of the collection')

    objects = CollectionManager()

    class Meta:
        ordering = ['abbrev']
        constraints = [
            models.UniqueConstraint(fields=['library', 'collection'],
                                    name='unique_library_collection')
        ]
        indexes = [
            CaseInsensitiveUniqueIndex(fields=['abbrev']),
        ]

    def __str__(self):
        return self.abbrev

    def natural_key(self):
        return (self.abbrev, )


class LanguageScriptManager(models.Manager):

    def get_by_natural_key(self, language, script):
        return self.get(language=language, script=script)


class LanguageScript(models.Model):
    '''Combination language and script'''
    language = models.CharField(max_length=255)
    script = models.CharField(max_length=255)
    display_name = models.CharField(
        max_length=255, blank=True, unique=True, null=True,
        help_text="Option to override the autogenerated language-script name")

    objects = LanguageScriptManager()

    class Meta:
        ordering = ['language']
        constraints = [
            models.UniqueConstraint(fields=['language', 'script'],
                                    name='unique_language_script')
        ]

    def __str__(self):
        # Allow display_name to override autogenerated string
        # otherwise combine language and script
        #   e.g. Judaeo-Arabic (Hebrew script)
        return self.display_name or f"{self.language} ({self.script} script)"

    def natural_key(self):
        return (self.language, self.script)

