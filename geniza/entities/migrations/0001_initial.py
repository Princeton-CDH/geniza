# Generated by Django 3.2.16 on 2023-06-12 20:55

import django.db.models.deletion
import django.db.models.expressions
import gfklookupwidget.fields
from django.db import migrations, models

import geniza.common.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("footnotes", "0028_sourcelanguage_direction"),
        ("corpus", "0039_document_ce_date"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("description_en", models.TextField(blank=True, null=True)),
                ("description_he", models.TextField(blank=True, null=True)),
                ("description_ar", models.TextField(blank=True, null=True)),
                (
                    "has_page",
                    models.BooleanField(
                        default=False,
                        help_text="True if this person should have a dedicated, public Person page on the PGP",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female"), ("U", "Unknown")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "People",
            },
        ),
        migrations.CreateModel(
            name="PersonDocumentRelationType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("name_en", models.CharField(max_length=255, null=True, unique=True)),
                ("name_he", models.CharField(max_length=255, null=True, unique=True)),
                ("name_ar", models.CharField(max_length=255, null=True, unique=True)),
            ],
            options={
                "verbose_name": "Person-Document relationship",
                "verbose_name_plural": "Person-Document relationships",
            },
        ),
        migrations.CreateModel(
            name="PersonPersonRelationType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("name_en", models.CharField(max_length=255, null=True, unique=True)),
                ("name_he", models.CharField(max_length=255, null=True, unique=True)),
                ("name_ar", models.CharField(max_length=255, null=True, unique=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("I", "Immediate family relations"),
                            ("E", "Extended family"),
                            ("M", "Relatives by marriage"),
                            ("B", "Business and property relationships"),
                        ],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "Person-Person relationship",
                "verbose_name_plural": "Person-Person relationships",
            },
        ),
        migrations.CreateModel(
            name="PersonRole",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("name_en", models.CharField(max_length=255, null=True, unique=True)),
                ("name_he", models.CharField(max_length=255, null=True, unique=True)),
                ("name_ar", models.CharField(max_length=255, null=True, unique=True)),
                (
                    "display_label",
                    models.CharField(
                        blank=True,
                        help_text="Optional label for display on the public site",
                        max_length=255,
                    ),
                ),
                (
                    "display_label_en",
                    models.CharField(
                        blank=True,
                        help_text="Optional label for display on the public site",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "display_label_he",
                    models.CharField(
                        blank=True,
                        help_text="Optional label for display on the public site",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "display_label_ar",
                    models.CharField(
                        blank=True,
                        help_text="Optional label for display on the public site",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Person social role",
                "verbose_name_plural": "Person social roles",
            },
            bases=(geniza.common.models.DisplayLabelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PersonPersonRelation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "from_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="to_person",
                        to="entities.person",
                    ),
                ),
                (
                    "to_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="from_person",
                        to="entities.person",
                        verbose_name="Person",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="entities.personpersonrelationtype",
                        verbose_name="Relation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PersonDocumentRelation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="corpus.document",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.person",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="entities.persondocumentrelationtype",
                        verbose_name="Relation",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="person",
            name="documents",
            field=models.ManyToManyField(
                related_name="people",
                through="entities.PersonDocumentRelation",
                to="corpus.Document",
                verbose_name="Related Documents",
            ),
        ),
        migrations.AddField(
            model_name="person",
            name="footnotes",
            field=models.ManyToManyField(
                blank=True, related_name="people", to="footnotes.Footnote"
            ),
        ),
        migrations.AddField(
            model_name="person",
            name="relationships",
            field=models.ManyToManyField(
                related_name="related_to",
                through="entities.PersonPersonRelation",
                to="entities.Person",
                verbose_name="Related People",
            ),
        ),
        migrations.AddField(
            model_name="person",
            name="role",
            field=models.ForeignKey(
                blank=True,
                help_text="Social role",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="entities.personrole",
                verbose_name="Role",
            ),
        ),
        migrations.CreateModel(
            name="Name",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "primary",
                    models.BooleanField(
                        default=False,
                        help_text="True if this is the primary name that should be displayed on the site.",
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("object_id", gfklookupwidget.fields.GfkLookupField()),
                (
                    "transliteration_style",
                    models.CharField(
                        choices=[("N", "N/A"), ("P", "PGP"), ("C", "Cambridge")],
                        default="N",
                        max_length=1,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        limit_choices_to=models.Q(("app_label", "entities")),
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="corpus.languagescript",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="personpersonrelation",
            constraint=models.UniqueConstraint(
                fields=("type", "from_person", "to_person"),
                name="unique_person_person_relation_by_type",
            ),
        ),
        migrations.AddConstraint(
            model_name="personpersonrelation",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("from_person", django.db.models.expressions.F("to_person")),
                    _negated=True,
                ),
                name="entities_personpersonrelation_prevent_self_relationship",
            ),
        ),
        migrations.AddConstraint(
            model_name="persondocumentrelation",
            constraint=models.UniqueConstraint(
                fields=("type", "person", "document"),
                name="unique_person_document_relation_by_type",
            ),
        ),
        migrations.AddConstraint(
            model_name="name",
            constraint=models.UniqueConstraint(
                condition=models.Q(("primary", True)),
                fields=("content_type", "object_id"),
                name="one_primary_name_per_entity",
            ),
        ),
    ]
