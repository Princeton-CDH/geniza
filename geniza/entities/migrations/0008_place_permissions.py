# Generated by Django 3.2.16 on 2023-08-16 19:46

from django.contrib.auth.management import create_permissions
from django.db import migrations

CONTENT_EDITOR = "Content Editor"
# new permissions for content editor
content_editor_perms = [
    "add_documentplacerelation",
    "change_documentplacerelation",
    "delete_documentplacerelation",
    "view_documentplacerelation",
    "view_documentplacerelationtype",
    "add_personplacerelation",
    "change_personplacerelation",
    "delete_personplacerelation",
    "view_personplacerelation",
    "view_personplacerelationtype",
    "add_place",
    "change_place",
    "delete_place",
    "view_place",
]


CONTENT_ADMIN = "Content Admin"
# additional new permissions for content admin: add, change, delete relation types
content_admin_perms = [
    "add_documentplacerelationtype",
    "change_documentplacerelationtype",
    "delete_documentplacerelationtype",
    "add_personplacerelationtype",
    "change_personplacerelationtype",
    "delete_personplacerelationtype",
]


def set_place_permissions(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    Permission = apps.get_model("auth", "Permission")

    # make sure permissions are created before loading the fixture
    # which references them
    # (when running migrations all at once, permissions may not yet exist)
    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, apps=apps, verbosity=0)
        app_config.models_module = None

    editor_group = Group.objects.get(name=CONTENT_EDITOR)
    permissions = []
    for codename in content_editor_perms:
        # using explicit get so that there will be an error if an
        # expected permission is not found
        permissions.append(Permission.objects.get(codename=codename))
    editor_group.permissions.add(*permissions)

    # update content admin group; add to content edit permissions
    admin_group = Group.objects.get(name=CONTENT_ADMIN)
    for codename in content_admin_perms:
        permissions.append(Permission.objects.get(codename=codename))
    admin_group.permissions.add(*permissions)


class Migration(migrations.Migration):
    dependencies = [
        ("entities", "0007_remove_name_one_primary_name_per_entity"),
        # relies on common for Groups to be created
        ("common", "0008_preload_github_coauthors"),
    ]

    operations = [
        migrations.RunPython(
            set_place_permissions, reverse_code=migrations.RunPython.noop
        )
    ]
