# Generated by Django 3.2.16 on 2023-09-12 16:41

from django.db import migrations, models


def populate_converse_names(apps, schema_editor):
    PersonPersonRelationType = apps.get_model("entities", "PersonPersonRelationType")

    # these did not get created in the original migration, oops
    PersonPersonRelationType.objects.get_or_create(
        name="Grandparent",
        name_en="Grandparent",
        category="E",  # E = extended family
    )
    PersonPersonRelationType.objects.get_or_create(
        name="Nephew or niece on sister's side",
        name_en="Nephew or niece on sister's side",
        category="E",  # E = extended family
    )
    PersonPersonRelationType.objects.get_or_create(
        name="Nephew or niece on brother's side",
        name_en="Nephew or niece on brother's side",
        category="E",  # E = extended family
    )
    PersonPersonRelationType.objects.get_or_create(
        name="Great nephew or niece",
        name_en="Great nephew or niece",
        category="E",  # E = extended family
    )

    # first: converse names where both sides of the relation exist as types
    bidirectional_converse_names = {
        "Child": "Parent",
        "Slave": "Owner",
        "Grandparent": "Grandchild",
        "Great grandparent": "Great grandchild",
        "Daughter-in-law or son-in-law": "Mother-in-law or father-in-law",
        "Stepparent": "Stepchild",
        "Debtor": "Lender",
        "Beneficiary (of will or gift)": "Testator/grantor (of will or gift)",
        "Seller": "Buyer",
        "Great aunt or uncle": "Great nephew or niece",
        "Maternal aunt or uncle": "Nephew or niece on sister's side",
        "Paternal aunt or uncle": "Nephew or niece on brother's side",
    }
    for left_name, right_name in bidirectional_converse_names.items():
        left_type = PersonPersonRelationType.objects.get(name=left_name)
        left_type.converse_name_en = right_name
        left_type.save()
        right_type = PersonPersonRelationType.objects.get(name=right_name)
        right_type.converse_name_en = left_name
        right_type.save()

    # second: converse names where only one side of the relation exists as a type, and the other
    # only exists as a converse_name
    unidirectional_converse_names = {
        "Maternal cousin": "Cousin",
        "Paternal cousin": "Cousin",
    }
    for type_name, converse_name in unidirectional_converse_names.items():
        relation_type = PersonPersonRelationType.objects.get(name=type_name)
        relation_type.converse_name_en = converse_name
        relation_type.save()

    # finally, for the third type of reverse relationships--where it is the same on both sides
    # (e.g. "Spouse": "Spouse"), we just simply do not enter anything in the converse_name, to
    # avoid duplicating anything.


class Migration(migrations.Migration):
    dependencies = [
        ("entities", "0008_place_permissions"),
    ]

    operations = [
        migrations.AddField(
            model_name="personpersonrelationtype",
            name="converse_name",
            field=models.CharField(
                blank=True,
                help_text="The converse of the relationship, for example, 'Child' when Name is 'Parent'.\n        May leave blank if the converse is identical (for example, 'Spouse' and 'Spouse').",
                max_length=255,
            ),
        ),
        migrations.AddField(
            model_name="personpersonrelationtype",
            name="converse_name_ar",
            field=models.CharField(
                blank=True,
                help_text="The converse of the relationship, for example, 'Child' when Name is 'Parent'.\n        May leave blank if the converse is identical (for example, 'Spouse' and 'Spouse').",
                max_length=255,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="personpersonrelationtype",
            name="converse_name_en",
            field=models.CharField(
                blank=True,
                help_text="The converse of the relationship, for example, 'Child' when Name is 'Parent'.\n        May leave blank if the converse is identical (for example, 'Spouse' and 'Spouse').",
                max_length=255,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="personpersonrelationtype",
            name="converse_name_he",
            field=models.CharField(
                blank=True,
                help_text="The converse of the relationship, for example, 'Child' when Name is 'Parent'.\n        May leave blank if the converse is identical (for example, 'Spouse' and 'Spouse').",
                max_length=255,
                null=True,
            ),
        ),
        migrations.RunPython(
            code=populate_converse_names, reverse_code=migrations.RunPython.noop
        ),
    ]
