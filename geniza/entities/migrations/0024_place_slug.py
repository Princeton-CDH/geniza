# Generated by Django 3.2.23 on 2024-04-29 19:12

from django.db import migrations, models
from slugify import slugify
from unidecode import unidecode


def populate_slugs(apps, schema_editor):
    """Popualte slugs for existing places.
    Code is identical to generate_slug(), but repeated here so as not to rely on
    model code during a migration.

    Adapted from mep-django"""
    Place = apps.get_model("entities", "Place")
    Name = apps.get_model("entities", "Name")
    ContentType = apps.get_model("contenttypes", "ContentType")

    place_contenttype = ContentType.objects.get_for_model(Place)

    for place in Place.objects.all():
        # Place.__str__ method
        try:
            place_name = Name.objects.get(
                content_type=place_contenttype, object_id=place.pk, primary=True
            )
            place_str = place_name.name
        except Name.MultipleObjectsReturned:
            place_name = Name.objects.filter(
                content_type=place_contenttype, object_id=place.pk, primary=True
            ).first()
            place_str = place_name.name
        except Name.DoesNotExist:
            place_name = Name.objects.filter(
                content_type=place_contenttype, object_id=place.pk
            ).first()
            place_str = place_name.name if place_name else str(place)

        # Place.generate_slug method
        place.slug = slugify(unidecode(place_str))
        dupe_slugs = (
            Place.objects.filter(slug__startswith=place.slug)
            .exclude(pk=place.pk)
            .order_by("slug")
            .values_list("slug", flat=True)
        )
        if dupe_slugs.count() and place.slug in dupe_slugs:
            # if not unique, add a number
            prefix = "%s-" % place.slug
            # get all the endings attached to this slug (i.e. unclear-##)
            suffixes = [
                slug[len(prefix) :] for slug in dupe_slugs if slug.startswith(prefix)
            ]
            # get the largest numeric suffix
            values = [int(num) for num in suffixes if num.isnumeric()]
            slug_count = max(values) if values else 1
            # use the next number for the current slug
            place.slug = "%s-%s" % (place.slug, slug_count + 1)
        place.save()


class Migration(migrations.Migration):
    dependencies = [
        ("entities", "0023_person_slug"),
    ]

    operations = [
        migrations.AddField(
            model_name="place",
            name="slug",
            field=models.SlugField(
                blank=True,
                help_text="Short, durable, unique identifier for use in URLs. Save and continue editing to have a new slug autogenerated. Editing will change the public, citable URL for this entity.",
                max_length=255,
                null=True,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="person",
            name="slug",
            field=models.SlugField(
                blank=True,
                help_text="Short, durable, unique identifier for use in URLs. Save and continue editing to have a new slug autogenerated. Editing will change the public, citable URL for this entity.",
                max_length=255,
                null=True,
                unique=True,
            ),
        ),
        migrations.CreateModel(
            name="PastPlaceSlug",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(max_length=255, unique=True)),
                (
                    "place",
                    models.ForeignKey(
                        on_delete=models.deletion.CASCADE,
                        related_name="past_slugs",
                        to="entities.place",
                    ),
                ),
            ],
        ),
        migrations.RunPython(populate_slugs, reverse_code=migrations.RunPython.noop),
    ]
