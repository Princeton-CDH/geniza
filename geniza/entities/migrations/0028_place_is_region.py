# Generated by Django 3.2.23 on 2025-02-24 17:29

from django.db import migrations, models


def set_existing_regions(apps, schema_editor):
    """Set the new is_region boolean true for Place records that include
    (region) in the name."""
    Place = apps.get_model("entities", "Place")
    Name = apps.get_model("entities", "Name")
    for name in Name.objects.filter(primary=True, name__icontains="(region)"):
        # get historic model for this Name's content_type
        model = apps.get_model(
            app_label=name.content_type.app_label,
            model_name=name.content_type.model,
        )
        # get content object that this Name is attached to
        content_object = model.objects.get(id=name.object_id)
        # if it's a match for Place, set is_region = True
        if isinstance(content_object, Place):
            content_object.is_region = True
            content_object.save()


class Migration(migrations.Migration):
    dependencies = [
        ("entities", "0027_placeplacerelation_converse_name"),
    ]

    operations = [
        migrations.AddField(
            model_name="place",
            name="is_region",
            field=models.BooleanField(
                default=False,
                help_text="Please restrict entries to regions explicitly mentioned in documents.",
                verbose_name="Region",
            ),
        ),
        migrations.RunPython(set_existing_regions, migrations.RunPython.noop),
    ]
