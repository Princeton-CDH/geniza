# Generated by Django 3.2.23 on 2025-04-07 14:38

import re

from django.db import migrations
from django.db.models import Q
from slugify import slugify
from unidecode import unidecode


def clean_person_slugs(apps, schema_editor):
    """Clean any person slugs where the ayin or hamza has definitely
    been converted to a dash, to remove that dash."""
    Person = apps.get_model("entities", "Person")
    PastPersonSlug = apps.get_model("entities", "PastPersonSlug")
    Name = apps.get_model("entities", "Name")
    ContentType = apps.get_model("contenttypes", "ContentType")

    person_contenttype = ContentType.objects.get_for_model(Person)

    for person_primary_name in Name.objects.filter(
        Q(name__icontains="示") | Q(name__icontains="士") | Q(name__icontains="'"),
        content_type=person_contenttype,
        primary=True,
    ):
        try:
            person = Person.objects.get(pk=person_primary_name.object_id)
        except Person.DoesNotExist:
            continue
        old_slug = slugify(unidecode(person_primary_name.name))
        cleaned_name_str = re.sub(r"[士示']", "", person_primary_name.name)
        new_slug = slugify(unidecode(cleaned_name_str))
        # cleaned slug exists? just skip, so we don't need "-n" logic;
        # this migration is just for convenience.
        newslug_exists = Person.objects.filter(slug=new_slug).exists()
        if not newslug_exists and new_slug != old_slug and person.slug == old_slug:
            person.slug = new_slug
            person.save()
            # ensure PastPersonSlug created for redirects
            PastPersonSlug.objects.get_or_create(slug=old_slug, person=person)


class Migration(migrations.Migration):
    dependencies = [
        ("entities", "0028_place_is_region"),
    ]

    operations = [
        migrations.RunPython(clean_person_slugs, migrations.RunPython.noop),
    ]
