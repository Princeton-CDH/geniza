# Generated by Django 3.2.8 on 2021-12-02 19:40

from django.db import migrations, models


def convert_edition_to_int(apps, schema_editor):
    Source = apps.get_model("footnotes", "Source")
    # find all sources with anything in the edition field
    editioned_sources = Source.objects.exclude(edition__exact="")
    for source in editioned_sources:
        # if possible, convert edition to an int
        if source.edition and source.edition.isdecimal():
            source.edition = int(source.edition)
            source.save()
        # otherwise, wipe it
        else:
            source.edition = ""
            source.save()
    # set all empty strings to null
    Source.objects.filter(edition__exact="").update(edition=None)


def revert_edition_to_string(apps, schema_editor):
    Source = apps.get_model("footnotes", "Source")
    # set all null to blank
    Source.objects.filter(edition__isnull=True).update(edition="")
    # set all integer to string
    for has_edition in Source.objects.exclude(edition__exact=""):
        has_edition.edition = str(has_edition.edition)
        has_edition.save()


class Migration(migrations.Migration):
    # in case this migration needs to be reversed, ensure data migration
    # occurs before NOT NULL constraint is re-applied
    atomic = False

    dependencies = [
        ("footnotes", "0013_add_fields_to_source"),
    ]

    operations = [
        # Allow null
        migrations.AlterField(
            model_name="source",
            name="edition",
            field=models.CharField(blank=True, null=True, max_length=255),
        ),
        # Convert all existing entries (there were only two as of 2021-12-02)
        migrations.RunPython(convert_edition_to_int, revert_edition_to_string),
        # Alter field to integer
        migrations.AlterField(
            model_name="source",
            name="edition",
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
    ]
