# Generated by Django 3.2.16 on 2023-07-18 19:04

from django.db import migrations
from django.db.models import Q


def migrate_footnote_locations(apps, schema_editor):
    # migration to copy footnote locations from all EDITION and TRANSLATION footnotes
    # to digital footnotes on the same source + document that are missing location
    Footnote = apps.get_model("footnotes", "Footnote")

    # we cannot use model constants in a migration, so for reference:
    # "X" is Footnote.DIGITAL_EDITION, "E" is Footnote.EDITION
    # "Y" is Footnote.DIGITAL_TRANSLATION, "T" is Footnote.TRANSLATION

    # get all digital footnotes that are missing location
    digital_footnotes = Footnote.objects.filter(
        Q(doc_relation__contains="X") | Q(doc_relation__contains="Y"),
        location="",
    )

    for digital_fn in digital_footnotes:
        if "X" in digital_fn.doc_relation:
            # get Edition for Digital Edition
            corresponding_footnote = Footnote.objects.filter(
                doc_relation__contains="E",
                source__pk=digital_fn.source.pk,
                object_id=digital_fn.object_id,
                content_type=digital_fn.content_type,
            ).exclude(location="")
        elif "Y" in digital_fn.doc_relation:
            # get Translation for Digital Translation
            corresponding_footnote = Footnote.objects.filter(
                doc_relation__contains="T",
                source__pk=digital_fn.source.pk,
                object_id=digital_fn.object_id,
                content_type=digital_fn.content_type,
            ).exclude(location="")

        # ensure there is exactly one corresponding; otherwise ambiguous which location to use
        if corresponding_footnote.count() == 1:
            # set location on digital edition and add it to update set
            digital_fn.location = corresponding_footnote.first().location
            digital_fn.save()


class Migration(migrations.Migration):
    dependencies = [
        ("footnotes", "0028_sourcelanguage_direction"),
    ]

    operations = [
        migrations.RunPython(
            migrate_footnote_locations, reverse_code=migrations.RunPython.noop
        )
    ]
