# Generated by Django 5.2.4 on 2025-10-02 20:43

from django.db import migrations, models
from django.utils.text import slugify
from unidecode import unidecode


def populate_slugs(apps, schema_editor):
    """Popualte slugs for existing sources.
    Code is nearly identical to Source.generate_slug() and
    SlugMixin.dedupe_slug(), but repeated here so as not to rely on model code
    during a migration.

    Adapted from mep-django"""
    Source = apps.get_model("footnotes", "Source")

    for source in Source.objects.all():
        # generate and dedupe slugs

        # pulling out all_authors() logic
        first_two_authors = source.authorship_set.all().order_by("sort_order")
        authors = [
            " ".join(
                part for part in [a.creator.last_name, a.creator.first_name] if part
            )
            for a in first_two_authors
        ][:5]
        title = (
            "-".join(source.title.split()[:5])
            if source.title
            else source.source_type.type
        )
        str_repr = (
            f"{authors}-{title}-{source.year}" if source.year else f"{authors}-{title}"
        )
        source.slug = slugify(unidecode(str_repr))
        dupe_slugs = (
            Source.objects.filter(slug__startswith=source.slug)
            .exclude(pk=source.pk)
            .order_by("slug")
            .values_list("slug", flat=True)
        )
        if dupe_slugs.count() and source.slug in dupe_slugs:
            # if not unique, add a number
            prefix = "%s-" % source.slug
            # get all the endings attached to this slug (i.e. unclear-##)
            suffixes = [
                slug[len(prefix) :] for slug in dupe_slugs if slug.startswith(prefix)
            ]
            # get the largest numeric suffix
            values = [int(num) for num in suffixes if num.isnumeric()]
            slug_count = max(values) if values else 1
            # use the next number for the current slug
            source.slug = "%s-%s" % (source.slug, slug_count + 1)
        source.save()


class Migration(migrations.Migration):

    dependencies = [
        ("footnotes", "0037_creator_creator_unique_name_first_name_en_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="source",
            name="slug",
            field=models.SlugField(
                blank=True,
                help_text="Short, durable, unique identifier for use in URLs. Save and continue editing to have a new slug autogenerated. Editing will change the public, citable URL for this entity.",
                max_length=255,
                null=True,
                unique=True,
            ),
        ),
        migrations.RunPython(populate_slugs, migrations.RunPython.noop),
    ]
