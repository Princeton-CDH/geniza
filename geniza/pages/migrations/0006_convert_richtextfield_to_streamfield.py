# Generated by Django 3.2.8 on 2022-02-07 16:03

import json

import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
from django.core.serializers.json import DjangoJSONEncoder
from django.db import migrations
from wagtail.rich_text import RichText

# adapted from https://docs.wagtail.org/en/stable/topics/streamfield.html#migrating-richtextfields-to-streamfield


def page_to_streamfield(page):
    # convert published Pages from RichTextField to StreamField
    changed = False
    if page.body.raw_text and not page.body:
        page.body = [("paragraph", RichText(page.body.raw_text))]
        changed = True
    return page, changed


def pagerevision_to_streamfield(revision_data):
    # convert drafts from RichTextField to StreamField
    changed = False
    body = revision_data.get("body")
    if body:
        try:
            json.loads(body)
        except ValueError:
            revision_data["body"] = json.dumps(
                [{"value": {"paragraph": body}, "type": "paragraph"}],
                cls=DjangoJSONEncoder,
            )
            changed = True
        else:
            # It's already valid JSON. Leave it.
            pass
    return revision_data, changed


def page_to_richtext(page):
    # reverse: StreamField to RichTextField
    changed = False
    if page.body.raw_text is None:
        raw_text = "".join(
            [
                child.value.source
                for child in page.body
                if child.block_type == "paragraph"
            ]
        )
        page.body = raw_text
        changed = True
    return page, changed


def pagerevision_to_richtext(revision_data):
    # reverse: StreamField to RichTextField (drafts)
    changed = False
    body = revision_data.get("body", "definitely non-JSON string")
    if body:
        try:
            body_data = json.loads(body)
        except ValueError:
            # It's not apparently a StreamField. Leave it.
            pass
        else:
            raw_text_list = []
            for child in body_data:
                if child["type"] == "paragraph":
                    # Handle both string and dict with "paragraph" key
                    child_text = (
                        child["value"]
                        if isinstance(child["value"], str)
                        else child["value"]["paragraph"]
                    )
                    raw_text_list.append(child_text)
            raw_text = "".join(raw_text_list)
            revision_data["body"] = raw_text
            changed = True
    return revision_data, changed


def convert(model, page_converter, pagerevision_converter):
    for page in model.objects.all():
        page, changed = page_converter(page)
        if changed:
            page.save()

        for revision in page.revisions.all():
            revision_data = json.loads(revision.content_json)
            revision_data, changed = pagerevision_converter(revision_data)
            if changed:
                revision.content_json = json.dumps(revision_data, cls=DjangoJSONEncoder)
                revision.save()


def convert_to_streamfield(apps, schema_editor):
    home_page = apps.get_model("pages", "HomePage")
    convert(home_page, page_to_streamfield, pagerevision_to_streamfield)
    content_page = apps.get_model("pages", "ContentPage")
    return convert(content_page, page_to_streamfield, pagerevision_to_streamfield)


def convert_to_richtext(apps, schema_editor):
    home_page = apps.get_model("pages", "HomePage")
    convert(home_page, page_to_richtext, pagerevision_to_richtext)
    content_page = apps.get_model("pages", "ContentPage")
    return convert(content_page, page_to_richtext, pagerevision_to_richtext)


class Migration(migrations.Migration):
    dependencies = [
        ("pages", "0005_containerpage"),
    ]

    operations = [
        migrations.AlterField(
            model_name="contentpage",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "paragraph",
                        wagtail.blocks.RichTextBlock(
                            features=[
                                "h2",
                                "h3",
                                "bold",
                                "italic",
                                "underline",
                                "link",
                                "ol",
                                "ul",
                                "blockquote",
                                "superscript",
                                "subscript",
                                "strikethrough",
                            ],
                            required=False,
                        ),
                    ),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "alternative_text",
                                    wagtail.blocks.TextBlock(
                                        help_text="Alternative text for visually impaired users to\nbriefly communicate the intended message of the image in this context.",
                                        required=True,
                                    ),
                                ),
                                (
                                    "caption",
                                    wagtail.blocks.RichTextBlock(
                                        features=["link", "superscript"], required=False
                                    ),
                                ),
                            ]
                        ),
                    ),
                ]
            ),
        ),
        migrations.AlterField(
            model_name="homepage",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "paragraph",
                        wagtail.blocks.RichTextBlock(
                            features=[
                                "h2",
                                "h3",
                                "bold",
                                "italic",
                                "underline",
                                "link",
                                "ol",
                                "ul",
                                "blockquote",
                                "superscript",
                                "subscript",
                                "strikethrough",
                            ],
                            required=False,
                        ),
                    ),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "alternative_text",
                                    wagtail.blocks.TextBlock(
                                        help_text="Alternative text for visually impaired users to\nbriefly communicate the intended message of the image in this context.",
                                        required=True,
                                    ),
                                ),
                                (
                                    "caption",
                                    wagtail.blocks.RichTextBlock(
                                        features=["link", "superscript"], required=False
                                    ),
                                ),
                            ]
                        ),
                    ),
                ]
            ),
        ),
        migrations.RunPython(convert_to_streamfield, convert_to_richtext),
    ]
