// -----------------------------------------------------------------------------
// Colors used across the project, including the theme.
// -----------------------------------------------------------------------------

@use "sass:color";
@use "sass:map";
@use "sass:meta";

// Basics
$white: #ffffff;
$black: #161616;
$blue: #146feb;
$transparent: transparent;

// Grays
$dark-gray: #3d3d3d;
$gray: #9e9e9e;
$light-gray: #ebebeb;
$off-white: #f7f7f7;

// Theme colors
$theme: (
    "primary": #436043,
    "primary-80%": rgba(67, 96, 67, 0.8),
    "secondary": #567856,
    "secondary-80%": rgba(86, 120, 86, 0.8),
    "tertiary": #7bac7b,
    "on-primary": $white,
    "on-secondary": $white,
    "on-tertiary": $black,
    "background": $white,
    "background-light": $off-white,
    "background-gray": $light-gray,
    "on-background": $black,
    "on-background-25%": rgba(0, 0, 0, 0.25),
    "on-background-light": $black,
    "on-background-light-alt": $dark-gray,
    "on-background-gray": $black,
);

// Dark mode theme colors
$dark-theme: (
    "primary": #b76680,
    "primary-80%": rgba(183, 102, 128, 0.8),
    "secondary": #c37f97,
    "secondary-80%": rgba(195, 127, 151, 0.8),
    "tertiary": #b05070,
    "on-primary": $black,
    "on-secondary": $black,
    "on-tertiary": $white,
    "background": $black,
    "background-light": $dark-gray,
    "background-gray": $gray,
    "on-background": $white,
    "on-background-25%": rgba(255, 255, 255, 0.25),
    "on-background-light": $white,
    "on-background-light-alt": $light-gray,
    "on-background-gray": $black,
);

/*
 * Mixin for applying theme colors: sets a given property by looking up
 * the color in the theme by name, and automatically switches it to the
 * corresponding dark mode version using a media query.
 *
 * @param {string} $color - The color name to look up in the theme
 * @param {string} $property - The CSS property to set; default "color"
 *
 */
@mixin apply-theme($color, $property: color) {
    #{$property}: map.get($theme, $color);

    @media (prefers-color-scheme: dark) {
        #{$property}: map.get($dark-theme, $color);
    }
}

/*
 * Like @apply-theme, but sets both the background and text color using
 * the corresponding pair (e.g. primary and on-primary). The combo is selected
 * by background color.
 *
 * @param {string} $color - The background color name to look up in the theme
 *
 */
@mixin apply-combo($background) {
    color: map.get($theme, "on-#{$background}");
    background-color: map.get($theme, $background);

    @media (prefers-color-scheme: dark) {
        color: map.get($dark-theme, "on-#{$background}");
        background-color: map.get($dark-theme, $background);
    }
}

/*
 * Mixin for applying theme colors to a box-shadow. Same as apply-theme,
 * but since box-shadow is defined in a single line and does not have
 * a separate color property, it needs a separate mixin.
 *
 * @param {string} $color - The color name to look up in the theme
 * @param {string} $property - The CSS property to set; default "color"
 *
 */
@mixin apply-theme-box-shadow($color) {
    box-shadow: 0px 2px 4px map.get($theme, $color);

    @media (prefers-color-scheme: dark) {
        box-shadow: 0px 2px 4px map.get($dark-theme, $color);
    }
}
